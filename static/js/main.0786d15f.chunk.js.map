{"version":3,"sources":["Circles/Circles.js","GameOver/GameOver.js","App.js","index.js"],"names":["Circles","props","className","active","onClick","click","style","backgroundColor","buttonColor","closeHandler","window","location","reload","GameOver","id","score","getRndInteger","min","max","Math","floor","random","App","state","current","showGameOver","pace","timer","undefined","next","nextActive","setState","setTimeout","bind","console","log","clickHandler","btnId","endHandler","startHandler","clearTimeout","this","Component","ReactDOM","render","document","getElementById"],"mappings":"6TAiBeA,G,YAdC,SAACC,GAET,OACI,yBACIC,UAAW,UAAYD,EAAME,OAAS,UAAW,IACjDC,QAASH,EAAMI,MACfC,MAAO,CAAEC,gBAAiBN,EAAME,OAASF,EAAME,OAASF,EAAMO,iBCNxEC,G,MAAe,WACjBC,OAAOC,SAASC,WAgBLC,EAbE,SAACZ,GACd,OACA,yBAAKa,GAAG,UACJ,yBAAKZ,UAAU,eACX,uBAAGY,GAAG,YAAN,oCAAmDb,EAAMc,MAAzD,KACA,4BAAQX,QAASK,GAAjB,YCPNO,EAAgB,SAACC,EAAKC,GAC1B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GA+FxCK,E,2MAzFbC,MAAQ,CACNR,MAAO,EACPS,QAAS,EACTC,cAAc,G,EAGhBC,KAAO,K,EACPC,WAAQC,E,EAERC,KAAO,WAGL,IAAIC,OAAaF,EAEjB,GACEE,EAAad,EAAc,EAAE,SACpBc,IAAe,EAAKP,MAAMC,SAErC,EAAKO,SAAS,CACZP,QAAQM,IAGV,EAAKJ,MAAQ,IACb,EAAKC,MAAQK,WAAW,EAAKH,KAAKI,KAAV,gBAAsB,EAAKP,MAEnDQ,QAAQC,IAAI,EAAKZ,MAAMC,U,EAIzBY,aAAe,SAACC,GACdH,QAAQC,IAAI,MAAOE,GAEf,EAAKd,MAAMC,UAAYa,EAK3B,EAAKN,SAAU,CACXhB,MAAO,EAAKQ,MAAMR,MAAQ,IAL5B,EAAKuB,c,EASTC,aAAe,WACb,EAAKV,Q,EAGPS,WAAa,WACXE,aAAa,EAAKb,OAElB,EAAKI,SAAU,CACbN,cAAc,K,wEAIR,IAAD,OACP,OACA,yBAAKvB,UAAU,OACb,0CACA,6CAAmBuC,KAAKlB,MAAMR,OAC9B,kBAAC,EAAD,CACIP,YAAa,UACbL,OAA+B,IAAvBsC,KAAKlB,MAAMC,QACnBnB,MAAO,kBAAM,EAAK+B,aAAa,MAEnC,kBAAC,EAAD,CACI5B,YAAa,UACbL,OAA+B,IAAvBsC,KAAKlB,MAAMC,QACnBnB,MAAO,kBAAM,EAAK+B,aAAa,MAEnC,kBAAC,EAAD,CACI5B,YAAa,UACbL,OAA+B,IAAvBsC,KAAKlB,MAAMC,QACnBnB,MAAO,kBAAM,EAAK+B,aAAa,MAEnC,kBAAC,EAAD,CACI5B,YAAa,UACbL,OAA+B,IAAvBsC,KAAKlB,MAAMC,QACnBnB,MAAO,kBAAM,EAAK+B,aAAa,MAGnC,6BACE,4BAAQhC,QAASqC,KAAKF,cAAtB,cACA,4BAAQnC,QAASqC,KAAKH,YAAtB,aAEAG,KAAKlB,MAAME,cAAgB,kBAAC,EAAD,CAAUV,MAAO0B,KAAKlB,MAAMR,a,GAtF7C2B,aCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0786d15f.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Circles.css\";\r\n\r\nconst Circles = (props) => {\r\n\r\n        return (\r\n            <div \r\n                className={'circle' + (props.active ? ' active': '')}\r\n                onClick={props.click}\r\n                style={{ backgroundColor: props.active ? props.active : props.buttonColor}}\r\n                >\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default Circles;","import React from 'react';\r\nimport './GameOver.css';\r\n\r\nconst closeHandler = () => {\r\n    window.location.reload();\r\n}\r\n\r\nconst GameOver = (props) => {\r\n    return (\r\n    <div id=\"result\">\r\n        <div className=\"gameoverbox\">\r\n            <p id=\"gameover\">Game Over! Your final score was: {props.score} </p>\r\n            <button onClick={closeHandler}>Close</button>\r\n        </div>\r\n    </div>\r\n    ); \r\n}\r\n\r\n\r\n\r\nexport default GameOver;","import React, {Component} from 'react';\nimport './App.css';\nimport Circles from './Circles/Circles';\nimport GameOver from './GameOver/GameOver';\n\nconst getRndInteger = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    current: 0,\n    showGameOver: false\n  };\n\n  pace = 1500;\n  timer = undefined;\n\n  next = () => {\n\n\n    let nextActive = undefined;\n\n    do {\n      nextActive = getRndInteger(1,4);\n      } while (nextActive === this.state.current);\n\n    this.setState({\n      current:nextActive,\n    });\n\n    this.pace *= 0.95;\n    this.timer = setTimeout(this.next.bind(this), this.pace);\n\n    console.log(this.state.current);\n\n  }\n\n  clickHandler = (btnId) => {\n    console.log('wow', btnId);\n\n    if (this.state.current !== btnId) {\n      this.endHandler();\n      return;\n    }\n\n    this.setState( {    \n        score: this.state.score + 1\n      })\n  }\n\n  startHandler = () => {\n    this.next();\n  }\n\n  endHandler = ()  => {\n    clearTimeout(this.timer);\n\n    this.setState( {\n      showGameOver: true\n    })\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <h1>Nopeuspeli</h1>\n      <p>Your score is: {this.state.score}</p>\n      <Circles \n          buttonColor= '#A2FFBA'\n          active={this.state.current === 1}\n          click={() => this.clickHandler(1)}\n      />\n      <Circles \n          buttonColor= '#FF57FF'\n          active={this.state.current === 2}\n          click={() => this.clickHandler(2)}\n      />\n      <Circles \n          buttonColor= '#EBE98A'\n          active={this.state.current === 3}\n          click={() => this.clickHandler(3)}\n          />\n      <Circles \n          buttonColor= '#61EBE5'\n          active={this.state.current === 4}\n          click={() => this.clickHandler(4)}\n          />\n\n      <div> \n        <button onClick={this.startHandler}>Start Game</button>\n        <button onClick={this.endHandler}>End Game</button>\n      </div>\n      { this.state.showGameOver && <GameOver score={this.state.score} />}\n    </div>\n  );\n}};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}